//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.832
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("2006/08/18 15:07:08")]

namespace AxCpfmsgacxa {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{2a52ba79-0158-4e4a-82ac-c582568b0e8f}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("OnCommand")]
    public class AxCpfMsg : System.Windows.Forms.AxHost {
        
        private Cpfmsgacxa.ICpfMsg ocx;
        
        private AxCpfMsgEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxCpfMsg() : 
                base("2a52ba79-0158-4e4a-82ac-c582568b0e8f") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(7)]
        public virtual bool m_bReceived {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("m_bReceived", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.m_bReceived;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(8)]
        public virtual bool m_bEnable_OnCommand {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("m_bEnable_OnCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.m_bEnable_OnCommand;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("m_bEnable_OnCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.m_bEnable_OnCommand = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(9)]
        public virtual string m_sMyIpAddr {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("m_sMyIpAddr", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.m_sMyIpAddr;
            }
        }
        
        public event _ICpfMsgEvents_OnCommandEventHandler OnCommand;
        
        public event System.EventHandler OnClose;
        
        public virtual void Open(string sCpfmsgsrv, int nPort, string sServer, string sMedia, string sName, string sApp, string sPhase, string sLogin) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Open", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Open(sCpfmsgsrv, nPort, sServer, sMedia, sName, sApp, sPhase, sLogin);
        }
        
        public virtual void Close() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Close", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.Close();
        }
        
        public virtual void SendEvent(string sPhase, string sField, string sEvent, Cpfmsgacxa.CpfParams objCpfParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendEvent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SendEvent(sPhase, sField, sEvent, objCpfParams);
        }
        
        public virtual void SendCommand(string sPhase, string sField, string sCommand, Cpfmsgacxa.CpfParams objCpfParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SendCommand(sPhase, sField, sCommand, objCpfParams);
        }
        
        public virtual void ThrowEvent(string sCpfmsgsrv, int nPort, string sServer, string sMedia, string sName, string sPhase, string sField, string sEvent, Cpfmsgacxa.CpfParams objCpfParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ThrowEvent", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ThrowEvent(sCpfmsgsrv, nPort, sServer, sMedia, sName, sPhase, sField, sEvent, objCpfParams);
        }
        
        public virtual void ThrowCommand(string sCpfmsgsrv, int nPort, string sServer, string sMedia, string sName, string sPhase, string sField, string sCommand, Cpfmsgacxa.CpfParams objCpfParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ThrowCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ThrowCommand(sCpfmsgsrv, nPort, sServer, sMedia, sName, sPhase, sField, sCommand, objCpfParams);
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxCpfMsgEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(Cpfmsgacxa._ICpfMsgEvents));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((Cpfmsgacxa.ICpfMsg)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnOnCommand(object sender, _ICpfMsgEvents_OnCommandEvent e) {
            if ((this.OnCommand != null)) {
                this.OnCommand(sender, e);
            }
        }
        
        internal void RaiseOnOnClose(object sender, System.EventArgs e) {
            if ((this.OnClose != null)) {
                this.OnClose(sender, e);
            }
        }
    }
    
    public delegate void _ICpfMsgEvents_OnCommandEventHandler(object sender, _ICpfMsgEvents_OnCommandEvent e);
    
    public class _ICpfMsgEvents_OnCommandEvent {
        
        public string sPhase;
        
        public string sField;
        
        public string sCommand;
        
        public Cpfmsgacxa.CpfParams objCpfParams;
        
        public _ICpfMsgEvents_OnCommandEvent(Cpfmsgacxa.CpfParams objCpfParams) {
            this.objCpfParams = objCpfParams;
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxCpfMsgEventMulticaster : Cpfmsgacxa._ICpfMsgEvents {
        
        private AxCpfMsg parent;
        
        public AxCpfMsgEventMulticaster(AxCpfMsg parent) {
            this.parent = parent;
        }
        
        public virtual void OnCommand(out string sPhase, out string sField, out string sCommand, Cpfmsgacxa.CpfParams objCpfParams) {
            _ICpfMsgEvents_OnCommandEvent oncommandEvent = new _ICpfMsgEvents_OnCommandEvent(objCpfParams);
            this.parent.RaiseOnOnCommand(this.parent, oncommandEvent);
        }
        
        public virtual void OnClose() {
            System.EventArgs oncloseEvent = new System.EventArgs();
            this.parent.RaiseOnOnClose(this.parent, oncloseEvent);
        }
    }
}
